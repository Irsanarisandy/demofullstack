Creating .Net Core project manually by command line:
=> dotnet new sln
-- create solution file, important to have for any C# project
=> dotnet new webapi -o API
-- create a .Net Core Web API project, to be contained in the "API" folder
=> dotnet sln add API
-- add the "API" project in the solution

Adding self-signed certificate for when running on localhost:
=> dotnet dev-certs https --trust

Run server:
=> dotnet watch run

Accessing database from .Net Core project:
- using NuGet, install Microsoft.EntityFrameworkCore (can be specific to database, e.g. sqlite)
- using terminal, install Entity Framework Core Tools
-- go to NuGet website and search for dotnet-ef to copy and paste the command
-- make sure that the version is related to the installed .Net Core SDK being used
=> dotnet-ef migrations add InitialCreate -o Data/Migrations
-- create the database migration "InitialCreate" from current entities in "Data/Migrations" folder
-- this has to be in "Migrations" folder, which can be placed anywhere
=> dotnet-ef database update
-- create the database from the structure given by the database migration
=> dotnet-ef database drop
-- delete the database

Generate .gitignore file for .Net Core project:
=> dotnet new gitignore

Angular lifecycle hooks:
- OnInit
-- executes after constructor, which is after the class and its property variables from dependency injection have been instantiated
-- recommended to use here for all other initialization/declaration or using property variables from dependency injection

Angular client folder structuring:
- any common modules and components should be inside shared module