Creating .Net Core project manually by command line:
=> dotnet new sln
-- create solution file, important to have for any C# project
=> dotnet new classlib -o Domain
-- create a .Net Core Class Library project, to be contained in the "Domain" folder
=> dotnet new webapi -o API
-- create a .Net Core Web API project, to be contained in the "API" folder
=> dotnet sln add API
-- add the "API" project in the solution

Adding self-signed certificate for when running on localhost:
=> dotnet dev-certs https --trust

Run server:
=> dotnet watch run

Accessing database from .Net Core project:
- using NuGet, install Microsoft.EntityFrameworkCore (can be specific to database, e.g. sqlite)
- using terminal, install Entity Framework Core Tools
-- go to NuGet website and search for dotnet-ef to copy and paste the command
-- make sure that the version is related to the installed .Net Core SDK being used
-- note: "dotnet-ef" command doesn't work unless file that implements dbcontext is in the UI project, so temporarily move this file to the UI project to use this command
=> dotnet-ef migrations add InitialCreate -o Data/Migrations
-- create the database migration "InitialCreate" from current entities in "Data/Migrations" folder
-- this has to be in "Migrations" folder, which can be placed anywhere within project
=> dotnet-ef migrations remove
-- undo the latest migration from current entities
=> dotnet-ef database update
-- create the database from the structure given by the database migration
=> dotnet-ef database drop
-- delete the database

.Net Core Onion Architecture:
* https://www.c-sharpcorner.com/article/onion-architecture-in-asp-net-core-mvc/
* https://www.c-sharpcorner.com/article/implementing-onion-architecture-in-asp-net-core-3-om/
- Domain / Data Access Layer
-- core layer of the application, includes data entities
- Repository Layer
-- acts as an abstract layer between the data access and business layer of the application
- Service Layer
-- business layer of the application, is used to communicate between UI and repository layers using interfaces
- UI Layer
-- external layer of the application, can be a web application, API or another UI application

Generate .gitignore file for .Net Core project:
=> dotnet new gitignore

Generate random json data:
- go to https://www.json-generator.com/ to generate the json data
-- for this project, can copy syntax from "jsongenerator.txt" file
- for this project, copy the result into "UserSeedData.json" located in "Data" folder

Application settings for prod:
- can use "appsettings-template.json" file by renaming it to "appsettings.json"
- for this project, it needs a Cloudinary account to fill in the corresponding values

Angular lifecycle hooks:
- OnInit
-- executes after constructor, which is after the class and its property variables from dependency injection have been instantiated
-- recommended to use here for all other initialization/declaration or using property variables from dependency injection

Angular client folder structuring:
- any common modules and components should be inside shared module

Generate Angular files (make sure to change directory beforehand):
=> ng g c nav --skip-tests
-- generate component "nav", excluding the test file

Overriding styling of built-in or 3rd party components (e.g. Angular Material):
- directly apply styles on the html
- if using class, can set encapsulation to ViewEncapsulation.None
-- not recommended as the styles for that component will affect other components if not careful
-- when used, make sure to only do it on a specific part of the component to avoid affecting other components

Angular folder structure:
- layout: components on the page level and routing
- shared: all components and modules that can be used anywhere

Angular Auth Guard:
- used for preventing unauthorized users from going to specific pages that requires login credentials
